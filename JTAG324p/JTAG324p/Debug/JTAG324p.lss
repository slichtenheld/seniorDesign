
JTAG324p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000002d6  0000036a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800102  00800102  0000036c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e6e  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d9  00000000  00000000  0000135a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f2  00000000  00000000  00001c33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  00002428  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009b0  00000000  00000000  000026a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000029c  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000032f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 19 01 	jmp	0x232	; 0x232 <__vector_28>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e6 ed       	ldi	r30, 0xD6	; 214
  90:	f2 e0       	ldi	r31, 0x02	; 2
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 30       	cpi	r26, 0x02	; 2
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a2 e0       	ldi	r26, 0x02	; 2
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a6 30       	cpi	r26, 0x06	; 6
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <main>
  b2:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <_Z14USART1_receivePh>:
	switch(tracker){
		case 0: m1.validity = var; break;
		case 1: m1.address = var; break;
		case 2: m1.cmd = var; break; 
	}
	incMsgTracker();
  ba:	fc 01       	movw	r30, r24
  bc:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
  c0:	84 fd       	sbrc	r24, 4
  c2:	0a c0       	rjmp	.+20     	; 0xd8 <_Z14USART1_receivePh+0x1e>
  c4:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
  c8:	83 fd       	sbrc	r24, 3
  ca:	08 c0       	rjmp	.+16     	; 0xdc <_Z14USART1_receivePh+0x22>
  cc:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
  d0:	82 ff       	sbrs	r24, 2
  d2:	06 c0       	rjmp	.+12     	; 0xe0 <_Z14USART1_receivePh+0x26>
  d4:	8d ef       	ldi	r24, 0xFD	; 253
  d6:	05 c0       	rjmp	.+10     	; 0xe2 <_Z14USART1_receivePh+0x28>
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	03 c0       	rjmp	.+6      	; 0xe2 <_Z14USART1_receivePh+0x28>
  dc:	8e ef       	ldi	r24, 0xFE	; 254
  de:	01 c0       	rjmp	.+2      	; 0xe2 <_Z14USART1_receivePh+0x28>
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
  e6:	90 83       	st	Z, r25
  e8:	08 95       	ret

000000ea <_Z15USART1_transmithb>:
  ea:	e8 ec       	ldi	r30, 0xC8	; 200
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	90 81       	ld	r25, Z
  f0:	95 ff       	sbrs	r25, 5
  f2:	fd cf       	rjmp	.-6      	; 0xee <_Z15USART1_transmithb+0x4>
  f4:	e9 ec       	ldi	r30, 0xC9	; 201
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	90 81       	ld	r25, Z
  fa:	9e 7f       	andi	r25, 0xFE	; 254
  fc:	90 83       	st	Z, r25
  fe:	66 23       	and	r22, r22
 100:	19 f0       	breq	.+6      	; 0x108 <_Z15USART1_transmithb+0x1e>
 102:	90 81       	ld	r25, Z
 104:	91 60       	ori	r25, 0x01	; 1
 106:	90 83       	st	Z, r25
 108:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 10c:	08 95       	ret

0000010e <_Z14USART1_MPCM_onv>:
 10e:	e8 ec       	ldi	r30, 0xC8	; 200
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	81 60       	ori	r24, 0x01	; 1
 116:	80 83       	st	Z, r24
 118:	08 95       	ret

0000011a <_Z15USART1_MPCM_offv>:
 11a:	e8 ec       	ldi	r30, 0xC8	; 200
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	8e 7f       	andi	r24, 0xFE	; 254
 122:	80 83       	st	Z, r24
 124:	08 95       	ret

00000126 <_Z21USART1_transmitEnablev>:
 126:	e9 ec       	ldi	r30, 0xC9	; 201
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	88 60       	ori	r24, 0x08	; 8
 12e:	80 83       	st	Z, r24
 130:	08 95       	ret

00000132 <_Z20USART1_receiveEnablev>:
 132:	e9 ec       	ldi	r30, 0xC9	; 201
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	80 61       	ori	r24, 0x10	; 16
 13a:	80 83       	st	Z, r24
 13c:	08 95       	ret

0000013e <_Z11USART1_initv>:
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 144:	80 e7       	ldi	r24, 0x70	; 112
 146:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 14a:	8e e7       	ldi	r24, 0x7E	; 126
 14c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
 150:	e9 ec       	ldi	r30, 0xC9	; 201
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	84 60       	ori	r24, 0x04	; 4
 158:	80 83       	st	Z, r24
 15a:	0e 94 87 00 	call	0x10e	; 0x10e <_Z14USART1_MPCM_onv>
 15e:	0e 94 93 00 	call	0x126	; 0x126 <_Z21USART1_transmitEnablev>
 162:	0e 94 99 00 	call	0x132	; 0x132 <_Z20USART1_receiveEnablev>
 166:	08 95       	ret

00000168 <_Z21USART1_receiveDisablev>:
 168:	e9 ec       	ldi	r30, 0xC9	; 201
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	8f 7e       	andi	r24, 0xEF	; 239
 170:	80 83       	st	Z, r24
 172:	08 95       	ret

00000174 <_Z18clearReceiveBufferv>:
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	1f 92       	push	r1
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
 17e:	19 82       	std	Y+1, r1	; 0x01
 180:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 184:	88 23       	and	r24, r24
 186:	4c f4       	brge	.+18     	; 0x19a <_Z18clearReceiveBufferv+0x26>
 188:	ae ec       	ldi	r26, 0xCE	; 206
 18a:	b0 e0       	ldi	r27, 0x00	; 0
 18c:	e8 ec       	ldi	r30, 0xC8	; 200
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	8c 91       	ld	r24, X
 192:	89 83       	std	Y+1, r24	; 0x01
 194:	80 81       	ld	r24, Z
 196:	88 23       	and	r24, r24
 198:	dc f3       	brlt	.-10     	; 0x190 <_Z18clearReceiveBufferv+0x1c>
 19a:	0e 94 b4 00 	call	0x168	; 0x168 <_Z21USART1_receiveDisablev>
 19e:	0e 94 99 00 	call	0x132	; 0x132 <_Z20USART1_receiveEnablev>
 1a2:	00 00       	nop
 1a4:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 1a8:	89 83       	std	Y+1, r24	; 0x01
 1aa:	00 00       	nop
 1ac:	0f 90       	pop	r0
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <_Z29USART1_receiveInterruptEnablev>:
 1b4:	e9 ec       	ldi	r30, 0xC9	; 201
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	80 68       	ori	r24, 0x80	; 128
 1bc:	80 83       	st	Z, r24
 1be:	08 95       	ret

000001c0 <main>:
volatile const unsigned char slaveAddr = 'X'; // use X, Y, and Z

int main(void)
{
	// initialize PORTB as outputs for debug purposes
	DDRB = 0b111;
 1c0:	87 e0       	ldi	r24, 0x07	; 7
 1c2:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b111;
 1c4:	85 b9       	out	0x05, r24	; 5
	//fullRotation();
	//PORTB = 0;
	//DDRA = 0b1111;
	//stepperPortOutput();
	/* Replace with your application code */
	USART1_init();
 1c6:	0e 94 9f 00 	call	0x13e	; 0x13e <_Z11USART1_initv>
	USART1_receiveInterruptEnable();
 1ca:	0e 94 da 00 	call	0x1b4	; 0x1b4 <_Z29USART1_receiveInterruptEnablev>
	sei();
 1ce:	78 94       	sei
	
	msgStatus = 0;	  // receive status
 1d0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <msgStatus>
	outstandingRqsts = 0;
 1d4:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <outstandingRqsts>
	msgRqst = 0;
 1d8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <msgRqst>
	mode = DATA_MODE;
 1dc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	
	while(1) { // infinite loop checking for outstanding requests
		
		asm volatile("nop");
 1e0:	00 00       	nop
		if (outstandingRqsts > 0) 
 1e2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <outstandingRqsts>
 1e6:	88 23       	and	r24, r24
 1e8:	d9 f3       	breq	.-10     	; 0x1e0 <main+0x20>
		{ // if outstanding request, handle request
			// CHECK IF BUSY --> SEND BUSY RESPONSE
		asm volatile("nop");		
 1ea:	00 00       	nop
 			PORTB &= ~(1<<DDRB2);
 1ec:	2a 98       	cbi	0x05, 2	; 5
 			switch (msgStatus){
 1ee:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <msgStatus>
 1f2:	8e 3f       	cpi	r24, 0xFE	; 254
 1f4:	51 f0       	breq	.+20     	; 0x20a <main+0x4a>
 1f6:	8f 3f       	cpi	r24, 0xFF	; 255
 1f8:	19 f0       	breq	.+6      	; 0x200 <main+0x40>
 1fa:	8d 3f       	cpi	r24, 0xFD	; 253
 1fc:	81 f4       	brne	.+32     	; 0x21e <main+0x5e>
 1fe:	0a c0       	rjmp	.+20     	; 0x214 <main+0x54>
 				case (FRAMEERROR):
 					//clearReceiveBuffer();
 					//PORTB &= ~(1<<DDRB2);
 					USART1_transmit(slaveFrameError, DATA_MSG);
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	83 e2       	ldi	r24, 0x23	; 35
 204:	0e 94 75 00 	call	0xea	; 0xea <_Z15USART1_transmithb>
 					break;
 208:	11 c0       	rjmp	.+34     	; 0x22c <main+0x6c>
 				case (DATAOVERRUNERROR):
 					//clearReceiveBuffer();
 					//PORTB &= ~(1<<DDRB1);
 					USART1_transmit(slaveDataOverRunError, DATA_MSG);
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	86 e2       	ldi	r24, 0x26	; 38
 20e:	0e 94 75 00 	call	0xea	; 0xea <_Z15USART1_transmithb>
 					break;
 212:	0c c0       	rjmp	.+24     	; 0x22c <main+0x6c>
 				case (PARITYERROR):
 					//clearReceiveBuffer();
 					//PORTB &= ~(1<<DDRB0);
 					USART1_transmit(slaveParityError, DATA_MSG);
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	81 e2       	ldi	r24, 0x21	; 33
 218:	0e 94 75 00 	call	0xea	; 0xea <_Z15USART1_transmithb>
 					break;
 21c:	07 c0       	rjmp	.+14     	; 0x22c <main+0x6c>
 				default: // no receive error
 						//PORTB = 0b111;
 						//PORTB = 0;
 						switch(msgRqst){
 21e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <msgRqst>
 							//case (STATUS):
 								//USART1_transmit(STATUSOK, DATA_MSG);
 								//PORTB &= ~(1<<DDRB1);
 								//break;
 							default:
 								USART1_transmit(msgRqst, DATA_MSG);
 222:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <msgRqst>
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	0e 94 75 00 	call	0xea	; 0xea <_Z15USART1_transmithb>
 						}
 			}
 			outstandingRqsts = 0;
 22c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <outstandingRqsts>
 230:	d7 cf       	rjmp	.-82     	; 0x1e0 <main+0x20>

00000232 <__vector_28>:
		}
	}
}

ISR(USART1_RX_vect) {
 232:	1f 92       	push	r1
 234:	0f 92       	push	r0
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	0f 92       	push	r0
 23a:	11 24       	eor	r1, r1
 23c:	2f 93       	push	r18
 23e:	3f 93       	push	r19
 240:	4f 93       	push	r20
 242:	5f 93       	push	r21
 244:	6f 93       	push	r22
 246:	7f 93       	push	r23
 248:	8f 93       	push	r24
 24a:	9f 93       	push	r25
 24c:	af 93       	push	r26
 24e:	bf 93       	push	r27
 250:	ef 93       	push	r30
 252:	ff 93       	push	r31
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	00 d0       	rcall	.+0      	; 0x25a <__vector_28+0x28>
 25a:	cd b7       	in	r28, 0x3d	; 61
 25c:	de b7       	in	r29, 0x3e	; 62
	unsigned char msgTemp = 0;
 25e:	1a 82       	std	Y+2, r1	; 0x02
	volatile int8_t errorTemp = 0;
 260:	19 82       	std	Y+1, r1	; 0x01
	errorTemp = USART1_receive(&msgTemp);
 262:	ce 01       	movw	r24, r28
 264:	02 96       	adiw	r24, 0x02	; 2
 266:	0e 94 5d 00 	call	0xba	; 0xba <_Z14USART1_receivePh>
 26a:	89 83       	std	Y+1, r24	; 0x01
//	clearReceiveBuffer();
	if (mode==MPCM_MODE)
 26c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 270:	88 23       	and	r24, r24
 272:	69 f0       	breq	.+26     	; 0x28e <__vector_28+0x5c>
	{
		// check for address match
	
		if (msgTemp==slaveAddr){ // otherwise, see if MCU is trying to talk to this slave
 274:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 278:	9a 81       	ldd	r25, Y+2	; 0x02
 27a:	98 13       	cpse	r25, r24
 27c:	05 c0       	rjmp	.+10     	; 0x288 <__vector_28+0x56>
			USART1_MPCM_off();
 27e:	0e 94 8d 00 	call	0x11a	; 0x11a <_Z15USART1_MPCM_offv>
			mode=DATA_MODE;
 282:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 286:	10 c0       	rjmp	.+32     	; 0x2a8 <__vector_28+0x76>
		}		 
		else { // if error message, reset receive buffer
			clearReceiveBuffer();
 288:	0e 94 ba 00 	call	0x174	; 0x174 <_Z18clearReceiveBufferv>
 28c:	0d c0       	rjmp	.+26     	; 0x2a8 <__vector_28+0x76>
		}
	}
	else{ // normal data, actually care what it has to say
		outstandingRqsts = 1;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <outstandingRqsts>
		msgStatus = errorTemp;
 294:	99 81       	ldd	r25, Y+1	; 0x01
 296:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <msgStatus>
		msgRqst = msgTemp;
 29a:	9a 81       	ldd	r25, Y+2	; 0x02
 29c:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <msgRqst>
		
		mode = MPCM_MODE; // go back to listening for address
 2a0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		USART1_MPCM_on();
 2a4:	0e 94 87 00 	call	0x10e	; 0x10e <_Z14USART1_MPCM_onv>
	}
	
}
 2a8:	0f 90       	pop	r0
 2aa:	0f 90       	pop	r0
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	ff 91       	pop	r31
 2b2:	ef 91       	pop	r30
 2b4:	bf 91       	pop	r27
 2b6:	af 91       	pop	r26
 2b8:	9f 91       	pop	r25
 2ba:	8f 91       	pop	r24
 2bc:	7f 91       	pop	r23
 2be:	6f 91       	pop	r22
 2c0:	5f 91       	pop	r21
 2c2:	4f 91       	pop	r20
 2c4:	3f 91       	pop	r19
 2c6:	2f 91       	pop	r18
 2c8:	0f 90       	pop	r0
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	0f 90       	pop	r0
 2ce:	1f 90       	pop	r1
 2d0:	18 95       	reti

000002d2 <_exit>:
 2d2:	f8 94       	cli

000002d4 <__stop_program>:
 2d4:	ff cf       	rjmp	.-2      	; 0x2d4 <__stop_program>
